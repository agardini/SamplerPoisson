// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_poisson
Rcpp::List sample_poisson(Eigen::VectorXi y, Eigen::MatrixXd X, int n0, std::vector<Eigen::VectorXd> m_mix_orig, std::vector<Eigen::VectorXd> v_mix_orig, std::vector<Eigen::VectorXd> w_mix_orig, Eigen::VectorXd log_offset, Eigen::MatrixXd S_beta, Eigen::VectorXd beta_init, int niter, int pr, int thin);
RcppExport SEXP _SamplerPoisson_sample_poisson(SEXP ySEXP, SEXP XSEXP, SEXP n0SEXP, SEXP m_mix_origSEXP, SEXP v_mix_origSEXP, SEXP w_mix_origSEXP, SEXP log_offsetSEXP, SEXP S_betaSEXP, SEXP beta_initSEXP, SEXP niterSEXP, SEXP prSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_orig(m_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_orig(v_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_orig(w_mix_origSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type log_offset(log_offsetSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S_beta(S_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_poisson(y, X, n0, m_mix_orig, v_mix_orig, w_mix_orig, log_offset, S_beta, beta_init, niter, pr, thin));
    return rcpp_result_gen;
END_RCPP
}
// sample_poisson_MH
Rcpp::List sample_poisson_MH(Eigen::VectorXi y, Eigen::MatrixXd X, int n0, std::vector<Eigen::VectorXd> m_mix_orig, std::vector<Eigen::VectorXd> v_mix_orig, std::vector<Eigen::VectorXd> w_mix_orig, std::vector<Eigen::VectorXd> m_mix_adj, std::vector<Eigen::VectorXd> v_mix_adj, std::vector<Eigen::VectorXd> w_mix_adj, Eigen::VectorXd check_mix, int b_gibbs_start, int b_check, int adjust, Eigen::VectorXd log_offset, Eigen::MatrixXd S_beta, Eigen::VectorXd beta_init, int niter, int pr, int thin);
RcppExport SEXP _SamplerPoisson_sample_poisson_MH(SEXP ySEXP, SEXP XSEXP, SEXP n0SEXP, SEXP m_mix_origSEXP, SEXP v_mix_origSEXP, SEXP w_mix_origSEXP, SEXP m_mix_adjSEXP, SEXP v_mix_adjSEXP, SEXP w_mix_adjSEXP, SEXP check_mixSEXP, SEXP b_gibbs_startSEXP, SEXP b_checkSEXP, SEXP adjustSEXP, SEXP log_offsetSEXP, SEXP S_betaSEXP, SEXP beta_initSEXP, SEXP niterSEXP, SEXP prSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_orig(m_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_orig(v_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_orig(w_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_adj(m_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_adj(v_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_adj(w_mix_adjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix(check_mixSEXP);
    Rcpp::traits::input_parameter< int >::type b_gibbs_start(b_gibbs_startSEXP);
    Rcpp::traits::input_parameter< int >::type b_check(b_checkSEXP);
    Rcpp::traits::input_parameter< int >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type log_offset(log_offsetSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S_beta(S_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_poisson_MH(y, X, n0, m_mix_orig, v_mix_orig, w_mix_orig, m_mix_adj, v_mix_adj, w_mix_adj, check_mix, b_gibbs_start, b_check, adjust, log_offset, S_beta, beta_init, niter, pr, thin));
    return rcpp_result_gen;
END_RCPP
}
// sample_poisson_auto
Rcpp::List sample_poisson_auto(Eigen::VectorXi y, Eigen::MatrixXd X, int n0, std::vector<Eigen::VectorXd> m_mix_orig, std::vector<Eigen::VectorXd> v_mix_orig, std::vector<Eigen::VectorXd> w_mix_orig, std::vector<Eigen::VectorXd> m_mix_adj, std::vector<Eigen::VectorXd> v_mix_adj, std::vector<Eigen::VectorXd> w_mix_adj, Eigen::VectorXd check_mix_min, Eigen::VectorXd check_mix_max, int b_gibbs_start, int b_check, double threshold_MH, double threshold_adj, Eigen::VectorXd log_offset, Eigen::MatrixXd S_beta, Eigen::VectorXd beta_init, int niter, int pr, int thin);
RcppExport SEXP _SamplerPoisson_sample_poisson_auto(SEXP ySEXP, SEXP XSEXP, SEXP n0SEXP, SEXP m_mix_origSEXP, SEXP v_mix_origSEXP, SEXP w_mix_origSEXP, SEXP m_mix_adjSEXP, SEXP v_mix_adjSEXP, SEXP w_mix_adjSEXP, SEXP check_mix_minSEXP, SEXP check_mix_maxSEXP, SEXP b_gibbs_startSEXP, SEXP b_checkSEXP, SEXP threshold_MHSEXP, SEXP threshold_adjSEXP, SEXP log_offsetSEXP, SEXP S_betaSEXP, SEXP beta_initSEXP, SEXP niterSEXP, SEXP prSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_orig(m_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_orig(v_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_orig(w_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_adj(m_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_adj(v_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_adj(w_mix_adjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix_min(check_mix_minSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix_max(check_mix_maxSEXP);
    Rcpp::traits::input_parameter< int >::type b_gibbs_start(b_gibbs_startSEXP);
    Rcpp::traits::input_parameter< int >::type b_check(b_checkSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_MH(threshold_MHSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_adj(threshold_adjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type log_offset(log_offsetSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S_beta(S_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_poisson_auto(y, X, n0, m_mix_orig, v_mix_orig, w_mix_orig, m_mix_adj, v_mix_adj, w_mix_adj, check_mix_min, check_mix_max, b_gibbs_start, b_check, threshold_MH, threshold_adj, log_offset, S_beta, beta_init, niter, pr, thin));
    return rcpp_result_gen;
END_RCPP
}
// sample_poissonm_nob
Rcpp::List sample_poissonm_nob(const Eigen::VectorXi y, const int n0, const int MH, const Eigen::VectorXd a_pri, const Eigen::VectorXd b_pri, const Eigen::MatrixXd X, const Rcpp::List Z_list, const Rcpp::List K_list, std::vector<Eigen::VectorXd> m_mix_orig, std::vector<Eigen::VectorXd> v_mix_orig, std::vector<Eigen::VectorXd> w_mix_orig, std::vector<Eigen::VectorXd> m_mix_adj, std::vector<Eigen::VectorXd> v_mix_adj, std::vector<Eigen::VectorXd> w_mix_adj, Eigen::VectorXd check_mix, int b_check, int adjust, int b_gibbs_start, const Eigen::VectorXd log_offset, const std::vector<int> rank_K_g, const Rcpp::List A_list, const Rcpp::List e_list, const Eigen::MatrixXd S_beta, const Eigen::VectorXd beta_init, const Rcpp::List g_init_list, const Eigen::VectorXd S2g_init, const int niter, const int pr, const int thin);
RcppExport SEXP _SamplerPoisson_sample_poissonm_nob(SEXP ySEXP, SEXP n0SEXP, SEXP MHSEXP, SEXP a_priSEXP, SEXP b_priSEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP K_listSEXP, SEXP m_mix_origSEXP, SEXP v_mix_origSEXP, SEXP w_mix_origSEXP, SEXP m_mix_adjSEXP, SEXP v_mix_adjSEXP, SEXP w_mix_adjSEXP, SEXP check_mixSEXP, SEXP b_checkSEXP, SEXP adjustSEXP, SEXP b_gibbs_startSEXP, SEXP log_offsetSEXP, SEXP rank_K_gSEXP, SEXP A_listSEXP, SEXP e_listSEXP, SEXP S_betaSEXP, SEXP beta_initSEXP, SEXP g_init_listSEXP, SEXP S2g_initSEXP, SEXP niterSEXP, SEXP prSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< const int >::type MH(MHSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type a_pri(a_priSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type b_pri(b_priSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type K_list(K_listSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_orig(m_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_orig(v_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_orig(w_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_adj(m_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_adj(v_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_adj(w_mix_adjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix(check_mixSEXP);
    Rcpp::traits::input_parameter< int >::type b_check(b_checkSEXP);
    Rcpp::traits::input_parameter< int >::type adjust(adjustSEXP);
    Rcpp::traits::input_parameter< int >::type b_gibbs_start(b_gibbs_startSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type log_offset(log_offsetSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type rank_K_g(rank_K_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type e_list(e_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S_beta(S_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type g_init_list(g_init_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type S2g_init(S2g_initSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< const int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_poissonm_nob(y, n0, MH, a_pri, b_pri, X, Z_list, K_list, m_mix_orig, v_mix_orig, w_mix_orig, m_mix_adj, v_mix_adj, w_mix_adj, check_mix, b_check, adjust, b_gibbs_start, log_offset, rank_K_g, A_list, e_list, S_beta, beta_init, g_init_list, S2g_init, niter, pr, thin));
    return rcpp_result_gen;
END_RCPP
}
// sample_poissonm_nob_auto
Rcpp::List sample_poissonm_nob_auto(const Eigen::VectorXi y, const int n0, const Eigen::VectorXd a_pri, const Eigen::VectorXd b_pri, const Eigen::MatrixXd X, const Rcpp::List Z_list, const Rcpp::List K_list, std::vector<Eigen::VectorXd> m_mix_orig, std::vector<Eigen::VectorXd> v_mix_orig, std::vector<Eigen::VectorXd> w_mix_orig, std::vector<Eigen::VectorXd> m_mix_adj, std::vector<Eigen::VectorXd> v_mix_adj, std::vector<Eigen::VectorXd> w_mix_adj, Eigen::VectorXd check_mix_min, Eigen::VectorXd check_mix_max, int b_gibbs_start, int b_check, double threshold_MH, double threshold_adj, const Eigen::VectorXd log_offset, const std::vector<int> rank_K_g, const Rcpp::List A_list, const Rcpp::List e_list, const Eigen::MatrixXd S_beta, const Eigen::VectorXd beta_init, const Rcpp::List g_init_list, const Eigen::VectorXd S2g_init, const int niter, const int pr, const int thin);
RcppExport SEXP _SamplerPoisson_sample_poissonm_nob_auto(SEXP ySEXP, SEXP n0SEXP, SEXP a_priSEXP, SEXP b_priSEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP K_listSEXP, SEXP m_mix_origSEXP, SEXP v_mix_origSEXP, SEXP w_mix_origSEXP, SEXP m_mix_adjSEXP, SEXP v_mix_adjSEXP, SEXP w_mix_adjSEXP, SEXP check_mix_minSEXP, SEXP check_mix_maxSEXP, SEXP b_gibbs_startSEXP, SEXP b_checkSEXP, SEXP threshold_MHSEXP, SEXP threshold_adjSEXP, SEXP log_offsetSEXP, SEXP rank_K_gSEXP, SEXP A_listSEXP, SEXP e_listSEXP, SEXP S_betaSEXP, SEXP beta_initSEXP, SEXP g_init_listSEXP, SEXP S2g_initSEXP, SEXP niterSEXP, SEXP prSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type a_pri(a_priSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type b_pri(b_priSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type K_list(K_listSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_orig(m_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_orig(v_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_orig(w_mix_origSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type m_mix_adj(m_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type v_mix_adj(v_mix_adjSEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::VectorXd> >::type w_mix_adj(w_mix_adjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix_min(check_mix_minSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type check_mix_max(check_mix_maxSEXP);
    Rcpp::traits::input_parameter< int >::type b_gibbs_start(b_gibbs_startSEXP);
    Rcpp::traits::input_parameter< int >::type b_check(b_checkSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_MH(threshold_MHSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_adj(threshold_adjSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type log_offset(log_offsetSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type rank_K_g(rank_K_gSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type A_list(A_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type e_list(e_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type S_beta(S_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type g_init_list(g_init_listSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type S2g_init(S2g_initSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type pr(prSEXP);
    Rcpp::traits::input_parameter< const int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_poissonm_nob_auto(y, n0, a_pri, b_pri, X, Z_list, K_list, m_mix_orig, v_mix_orig, w_mix_orig, m_mix_adj, v_mix_adj, w_mix_adj, check_mix_min, check_mix_max, b_gibbs_start, b_check, threshold_MH, threshold_adj, log_offset, rank_K_g, A_list, e_list, S_beta, beta_init, g_init_list, S2g_init, niter, pr, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SamplerPoisson_sample_poisson", (DL_FUNC) &_SamplerPoisson_sample_poisson, 12},
    {"_SamplerPoisson_sample_poisson_MH", (DL_FUNC) &_SamplerPoisson_sample_poisson_MH, 19},
    {"_SamplerPoisson_sample_poisson_auto", (DL_FUNC) &_SamplerPoisson_sample_poisson_auto, 21},
    {"_SamplerPoisson_sample_poissonm_nob", (DL_FUNC) &_SamplerPoisson_sample_poissonm_nob, 29},
    {"_SamplerPoisson_sample_poissonm_nob_auto", (DL_FUNC) &_SamplerPoisson_sample_poissonm_nob_auto, 30},
    {NULL, NULL, 0}
};

RcppExport void R_init_SamplerPoisson(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
